name: Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t my-bridge .

      - name: Create archive
        run: |
          mkdir -p release
          cp /app_build/emojis.txt release/
          cp /app_build/target/release/bridge release/
          tar -czf release.tar.gz -C release .

      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.os }}
          path: release.tar.gz

  create_release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | sed 's/version = //; s/"//g; s/ //g')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create a new branch
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          git checkout -b release-${{ github.run_id }}

      - name: Create a new tag
        run: |
          git tag -a v${{ env.VERSION }} -m "Release version v${{ env.VERSION }}"
          git push origin release-${{ github.run_id }}
          git push origin v${{ env.VERSION }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
